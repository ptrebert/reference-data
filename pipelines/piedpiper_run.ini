; template for PiedPiper run configuration files

[Run]
load_path= /home/pebert/work/code/mpggit/refdata
load_name= pipelines.ppl_make_refdata

[Annotation]
spectable= /home/pebert/work/code/mpggit/refdata/annotation/species.tsv

[Pipeline]
name= REFDATA
workdir= ${EnvPaths:workdir}

liftover_task= False
liftover_check= False

# Generic
hg19toh37nh= egrep "^chr[0-9XY]+\s" {{inputfile}} | sed 's/chr//' > {{outputfile}}
hg19toh37hd= head -n 1 {{inputfile}} > {{outputfile}} && egrep "^chr[0-9XY]+\s" {{inputfile}} | sed 's/chr//' >> {{outputfile}}

# Major task: genomes
# this is currently only for hs37d5
genstdfagz= gunzip -c {{inputfile}} > {path[0]}/{ASSM[0]}.fa.tmp ; gzip -c {path[0]}/{ASSM[0]}.fa.tmp > {{outputfile}} ; rm {path[0]}/{ASSM[0]}.fa.tmp
to2bit= faToTwoBit {{inputfile}} {{outputfile}}
tofagz= twoBitToFa {inputfile} stdout | gzip > {outputfile}
tofabgz= twoBitToFa {{inputfile}} {path[0]}/{ASSM[0]}.fa.tmp ;
 bgzip -c {path[0]}/{ASSM[0]}.fa.tmp > {{outputfile}} && samtools faidx {{outputfile}} ;
 rm {path[0]}/{ASSM[0]}.fa.tmp
tofasta= twoBitToFa {inputfile} {outputfile} && samtools faidx {outputfile}

# Major task: chromosome sizes
chromwg= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}}
chromauto= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}} --select "(chr)?[0-9ABCDEF][0-9A-Z]?(\s|$$)"
chromaugo= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}} --select "(chr)?[0-9ABCDEFXYZW][0-9A-Z]?(\s|$$)"

# Major task: bowtie2 indices
bt2idx= bowtie2-build --threads 5 {{inputfile}} {subpath[0][2]}/srmidx/bowtie2/{ASSM[0]}

# Major task: gene models
gtftobed= convert_genemodel.py --input {inputfile} --output {outputfile} --off-by-one
enstobed= convert_genemodel.py --input {{inputfile}} --output {{outputfile}} --ucsc-ensembl
 --ensembl-source {path[0]}/ensemblSource_UCSC_{ASSM[0]}.txt.gz
 --ensembl-name {path[0]}/ensemblToGeneName_UCSC_{ASSM[0]}.txt.gz
subpchg19= filter_genemodel.py --gene-size 750 --subset protein_coding --input-type gencode --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/hsa_hg19_gencode_{GENCVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/hsa_hg19_gencode_{GENCVER[0]}.map.tsv --ccds-only
 --chrom-sizes ${workdir}/chromsizes/chrom_augo/hg19_chrom_augo.tsv
subpcmm9= filter_genemodel.py --gene-size 750 --subset protein_coding --input-type gencode --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/mmu_mm9_gencode_{GENCVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/mmu_mm9_gencode_{GENCVER[0]}.map.tsv --ccds-only
 --chrom-sizes ${workdir}/chromsizes/chrom_augo/mm9_chrom_augo.tsv
subpcbta= filter_genemodel.py --gene-size 750 --subset protein_coding --input-type ensbta --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/bta_bosTau7_ensembl_v{ENSVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/bta_bosTau7_ensembl_v{ENSVER[0]}.map.tsv
 --chrom-sizes ${workdir}/chromsizes/chrom_augo/bosTau7_chrom_augo.tsv
subpcens= filter_genemodel.py --gene-size 750 --subset protein_coding --input-type ensucsc --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/{ANNOTID[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/{ANNOTID[0]}.map.tsv
 --chrom-sizes ${workdir}/chromsizes/chrom_augo
subpchdf= creepiest.py -nod convert --task region --use-header
 --input {{inputfile}} --output {{outputfile}} --output-group {ASSM[0]}/{ANNOT[0]}/{VER[0]}/{REGTYPE[0]}
hsaexons= extract_exons.py -g {{inputfile}} -m {subpath[0][1]}/subsets/protein_coding/hsa_hg19_gencode_v19.map.tsv -o {{outputfile}}
mmuexons= extract_exons.py -g {{inputfile}} -m {subpath[0][1]}/subsets/protein_coding/mmu_mm9_gencode_vM1.map.tsv -o {{outputfile}}
btaexons= extract_exons.py -g {{inputfile}} -m {subpath[0][1]}/subsets/protein_coding/bta_bosTau7_ensembl_v75.map.tsv -o {{outputfile}}
ensexons= extract_exons.py -g {{inputfile}} -m {subpath[0][1]}/subsets/protein_coding/{ANNOTID[0]}.map.tsv -o {{outputfile}}

# Major task: transcript models and indices
tmfasta= make_transcriptome.py --input {{inputfile}} --output {{outputfile}} --seq-file {subpath[0][3]}/genomes/wg_2bit/{ASSM[0]}.2bit
genidx31= salmon index --kmerLen 31 --transcripts <(gunzip -c {{inputfile}}) --threads 15
 --index {subpath[0][1]}/qindex/{TRANSCRIPTOME[0]}.k31.idx --type quasi --perfectHash
genidx19= salmon index --kmerLen 19 --transcripts <(gunzip -c {{inputfile}}) --threads 15
 --index {subpath[0][1]}/qindex/{TRANSCRIPTOME[0]}.k19.idx --type quasi --perfectHash

# Major task: orthologs
refgenes= ${workdir}/genemodel/subsets/protein_coding
proc_hcop= process_hcop.py --input {{inputfiles}} --output {{outputfile}} -ann ${refgenes}
proc_orthodb= process_orthodb.py --input {{inputfiles}} --output {{outputfile}} --cache-file cache_odb_v9.h5
 --annotation ${EnvPaths:workdir}/genemodel/subsets/protein_coding --species-table ${Annotation:spectable}

# Major task: LOLA
lola_isect= bedtools multiinter -i {{inputfiles}} | cut -f 1-4 | egrep "\s{NUM}$$" | sort -V -k1 -k2n,3n > {{outputfile}} && rm {{inputfiles}}
lola_copy= gunzip -c {inputfiles} | sort -V -k1 -k2n,3n > {outputfile} && rm {inputfiles}

# Major task: promoter
prommerge= bedtools merge -c 4,7,8 -o collapse,min,max -delim "@" -i {inputfile} > {outputfile}

# Major task: enhancer
catgzbed= gunzip -c {{inputfiles}} | cut -f 1,2,3,4 | sort -V -k 1,2 > {{outputfile}}
mrgbed= bedtools merge -d 5 -c 4 -o distinct -delim @ -i {inputfile} > {outputfile}
hg19map= CrossMap.py bed ${workdir}/chainfiles/rawdata/hg38_to_hg19_filt.chain.gz {{inputfile}} {{outputfile}}
hg19final= process_gh_mapping.py -i {inputfile} -w 5 -c ${workdir}/conservation/phylop/scores/hg19_phyloP46way_scores.h5 -o {outputfile}
hg19mldata= prep_gh_mldata.py -s ${workdir}/genomes/wg_2bit/hg19.2bit -g ${workdir}/genemodel/subsets/protein_coding/roi_hdf/hsa_hg19_gencode_v19.reg5p.h5
            -e {{inputfile}} -o {subpath[0][1]}/temp/hg19_genehancer_mldata.h5 -i {subpath[0][1]}/temp/hg19_genehancer_mldata_cvidx --train --workers 14
hg19train= run_rf_enhreg.py --workers 15 -i {{inputfile}} -o {{outputfile}} -d {path[0]}/hg19_genehancer_mldata.h5 --tune
hg19tomap= cut -f 1-6,10-13 {inputfile} > {outputfile}
ghmap= CrossMap.py bed {chainfile} {{inputfile}} {{outputfile}}
specfinal= process_gh_mapping.py -i {{inputfile}} -w 5 -o {{outputfile}} -d query -chr ${workdir}/chromsizes/chrom_augo/{ASSM[0]}_chrom_augo.tsv
specmldata= prep_gh_mldata.py -s {sequence} -g {genes} -e {{inputfile}} -o {{outputfile}} --test --workers 6
specenhest= run_rf_enhreg.py --workers 6 -d {inputfile} -o {outputfile} --apply
specega= run_rf_enhreg.py --workers 1 -d {inputfile} -o {outputfile} --extract

# Major task: UCSC chain files
refchrom= ${workdir}/chromsizes/chrom_auto
refgenome= ${workdir}/genomes/wg_2bit
chfprefilt= chainFilter -t={targetchroms} -q={querychroms}
 -tMinSize=100 -qMinSize=100 -zeroGap {{inputfile}} | gzip > {{outputfile}}
# take filtered chain file, swap, make query best chain (=target in the swapped file)
chfswap= chainStitchId {{inputfile}} stdout | chainSwap stdin stdout | chainSort stdin stdout | gzip -c > {{outputfile}}
# take target best chain, make target best net (that was the query assembly in the original input file)
qrybnet= chainPreNet {{inputfile}} ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}
# take target best net AND target best chain, make reciprocal best chain (for the query assembly in the original input file)
qrybchain= netChainSubset {{inputfile}} ${workdir}/chainfiles/tmp_swap/{TARGET[0]}_to_{QUERY[0]}.tbest.chain.gz stdout |
           chainStitchId stdin stdout | gzip -c > {{outputfile}}
# take reciprocal best chain and swap again to get reciprocal best chains for (original) target
trgbchain= chainSwap {{inputfile}} stdout | chainSort stdin stdout | gzip -c > {{outputfile}}

trgbnet= chainPreNet {{inputfile}} ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}

# filter the rbest chain files to remove again garbage chains (small size or low score)
trgbfilt= chainFilter -minScore=1000 -zeroGap -tMinSize=100 -qMinSize=100 -minGapless=20 {{inputfile}} | gzip > {{outputfile}}

# maxGap=0 breaks all blocks at gap locations in target or query
# sort output by genomic location and add identifier (= line number)
# to associate with mapped regions
trgbbed= chainToAxt -maxGap=0 -minScore=1000 -bed {{inputfile}} ${refgenome}/{TARGET[0]}.2bit ${refgenome}/{QUERY[0]}.2bit stdout |
         sort -V -k1,2 | awk -v OFS="\t" '{{{{print $$1,$$2,$$3,$$4"_"NR"_"$$5"_"$$6}}}}' > {{outputfile}}
# assert that regions are not overlapping each other
bedselfovl= bedtools intersect -c -a {inputfile} -b {inputfile} | cut -f 5 | uniq > {outputfile}
# map/lift target regions with both liftOver and CrossMap to check for differences
time_start= echo "{{inputfile}}" > {subpath[0][1]}/{TARGET[0]}_to_{QUERY[0]}.time.log ; date >> {subpath[0][1]}/{TARGET[0]}_to_{QUERY[0]}.time.log
time_end= date >> {subpath[0][1]}/{TARGET[0]}_to_{QUERY[0]}.time.log
crossmap= CrossMap.py bed {subpath[0][1]}/rbest_chain_filt/{TARGET[0]}_to_{QUERY[0]}.rbest.chain.filt.gz {{inputfile}} {{outputfile}}
liftover= liftOver -minMatch=0.1 {{inputfile}} {subpath[0][1]}/rbest_chain_filt/{TARGET[0]}_to_{QUERY[0]}.rbest.chain.filt.gz
          {{outputfile}} {subpath[0][1]}/qry_mapped/liftover/{basename[0]}.unlifted.txt
crossmap_time= ${time_start} && ${crossmap} && ${time_end}
liftover_time= ${time_start} && ${liftover} && ${time_end}

mrgblocks= merge_map_blocks.py --target {{inputfile}} --query {subpath[0][1]}/qry_mapped/crossmap/{TARGET[0]}_to_{QUERY[0]}.mapped.bed
           --output {{outputfile}}
switchblocks= merge_map_blocks.py --target {{inputfile}} --query {subpath[0][1]}/qry_mapped/crossmap/{TARGET[0]}_to_{QUERY[0]}.mapped.bed
           --output {{outputfile}} --switch
mapidx= creepiest.py -nod convert --task map -tassm {TARGET[0]} -qassm {QUERY[0]}
 --input {{inputfile}} --output {{outputfile}} --index-col 4
 -tchr ${refchrom}/{TARGET[0]}_chrom_auto.tsv -qchr ${refchrom}/{QUERY[0]}_chrom_auto.tsv

qrysymm= chain_symfilt.py --task symmfilt --min-score 2000 --min-size 25 --chain-file {{inputfile}} --chrom {chrom} --output-file {{outputfile}}
normblocks= chain_symfilt.py --task normmap --map-file {inputfile} --output-file {outputfile}
dumptrg= chain_symfilt.py --task dump --map-file {{inputfile}} > {{outputfile}}

dumpqry= chain_symfilt.py --task dump --query --map-file {{inputfile}} > {{outputfile}}

sortblocks= sort -V -k 4n {inputfile} > {outputfile}


# Major task: NGS blacklists
blmerge= bedtools merge -d 25 -c 4 -o collapse -delim "@" -i {inputfile} | sort -V -k1,2 > {outputfile}

# Major task: conservation tracks
elembed= gunzip -c {inputfile} | cut -f 2,3,4,5,6 |
 egrep "chr[0-9XY][0-9AB]?\s" | sort -V -k1,1 -k2n,3n | gzip > {outputfile}
hsaphylop= merge_wigfix.py --workers 15 -i {{inputfiles}} -c ${workdir}/chromsizes/chrom_augo/hg19_chrom_augo.tsv -o {{outputfile}}
mmuphylop= merge_wigfix.py --workers 15 -i {{inputfiles}} -c ${workdir}/chromsizes/chrom_augo/mm9_chrom_augo.tsv -o {{outputfile}}
mmugenecons= annotate_gene_cons.py --gene-body ${refgenes}/roi_hdf/mmu_mm9_gencode_vM1.body.h5 --cons-score {{inputfile}} --output {{outputfile}}
hsagenecons= annotate_gene_cons.py --gene-body ${refgenes}/roi_hdf/hsa_hg19_gencode_v19.body.h5 --cons-score {{inputfile}} --output {{outputfile}}

# Major task: TSS model
tssisect= bedtools closest -s -d -a {inputfile} -b ${EnvPaths:workdir}/genemodel/bed_format/gencode.v19.annotation.bed.gz | cut -f 1,2,3,6,15- | sed 's/\r//' > {outputfile}

###################
# Project section #
###################

# DEEP hg19 - mm10 alignment
deep_refchrom= ${workdir}/chromsizes/chrom_augo
deep_refgenome= ${workdir}/genomes/wg_2bit
deep_chfprefilt= chainFilter -t={targetchroms} -q={querychroms}
 -tMinSize=50 -qMinSize=50 -zeroGap {{inputfile}} | gzip > {{outputfile}}

# chain swap task is identical to regular chain file tasks

deep_qrybnet= chainPreNet {{inputfile}} ${deep_refchrom}/{TARGET[0]}_chrom_augo.tsv ${deep_refchrom}/{QUERY[0]}_chrom_augo.tsv stdout |
              chainNet -minSpace=1 -minScore=0 stdin ${deep_refchrom}/{TARGET[0]}_chrom_augo.tsv ${deep_refchrom}/{QUERY[0]}_chrom_augo.tsv stdout /dev/null |
              netSyntenic stdin stdout | gzip -c > {{outputfile}}

# take target best net AND target best chain, make reciprocal best chain (for the query assembly in the original input file)
deep_qrybchain= netChainSubset {{inputfile}} ${workdir}/projects/deep/temp/swap/{TARGET[0]}_to_{QUERY[0]}.tbest.chain.gz stdout |
                chainStitchId stdin stdout | gzip -c > {{outputfile}}

# take reciprocal best chain and swap again to get reciprocal best chains for (original) target
# task identical to regular chain task

# filter the rbest chain files to remove again garbage chains (small size or low score)
deep_trgbfilt= chainFilter -minScore=2000 -zeroGap -tMinSize=50 -qMinSize=50 -minGapless=10 {{inputfile}} | gzip > {{outputfile}}

# dump target to BED to create CrossMap input - task identical to regular chain task

deep_crossmap= CrossMap.py bed {subpath[0][1]}/temp/rbest_chain_filt/{TARGET[0]}_to_{QUERY[0]}.rbest.chain.filt.gz {{inputfile}} {{outputfile}}

# the input file is taken from the CrossMap task, so it is the mapped regions
deep_mrgblocks= merge_map_blocks.py --query {{inputfile}} --target {path[0]}/{TARGET[0]}_to_{QUERY[0]}.rbest.bed
                --output {{outputfile}} --filter 10

deep_trgbed= gunzip -c {inputfile} | cut -f 1,2,3,5 | sort -V -k 1,2 | gzip > {outputfile}

deep_mapaln= bedtools map -c 4 -o mean -prec 3 -a {{inputfile}} -b {subpath[0][4]}/mappability/rawdata/hg19_crg_align_50mer.bg.gz
             | gzip > {{outputfile}}

#################################

# Sarvesh: protein coding genes > 2kb
srv_pcgenes= convert_genemodel.py --input {inputfile} --output {outputfile} --filter-size 2000 --filter-type "feature:gene,gene_type:protein_coding"
srv_cgiprom= bedtools intersect -header -u -a {inputfile} -b ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_wg.bed |
 cut -f 1,2,3,4,5,6,8,10,26 > {outputfile}
srv_noncgi= bedtools intersect -header -v -a {inputfile} -b ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_wg.bed |
 cut -f 1,2,3,4,5,6,8,10,26 > {outputfile}
srv_annreg= annotate_regions.py -f gc vavouri -i {inputfile} -o {outputfile} -w 2 -g ${workdir}/genomes/wg_2bit/hg19.2bit --dump-fasta
# new set, all protein coding genes
srv_allgenes= convert_genemodel.py --input {inputfile} --output {outputfile} --filter-type "feature:gene,gene_type:protein_coding"
srv_extgenes= bedtools slop -i {inputfile} -g ${EnvPaths:workdir}/chromsizes/chrom_wg/hg19_chrom_wg.tsv -b 1000 | cut -f 1,2,3,4,5,6,8,10,26 | gzip -c > {outputfile}
srv_cgidist= bedtools intersect -header -v -a ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_auto.bed -b {{inputfile}} > {{outputfile}}
srv_cgiprox= bedtools intersect -header -u -a ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_auto.bed -b {{inputfile}} > {{outputfile}}
srv_anncgi= annotate_regions.py -f -i {inputfile} -o {outputfile} -w 2 -g ${workdir}/genomes/wg_2bit/hg19.2bit --dump-fasta
# End of project: Sarvesh

[Ruffus]
use_threads= True
jobs= 25
verbose= 2
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=6G,mem_free=3G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 1

[ParallelJobConfig]
debug= -M pebert@mpi-inf.mpg.de -m beas
silent= -M pebert@mpi-inf.mpg.de -m n
notify= ${silent}
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= ${silent} -l h_vmem=50G,mem_free=25G,slots_free=5,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[NodeJobConfig]
debug= -M pebert@mpi-inf.mpg.de -m beas
silent= -M pebert@mpi-inf.mpg.de -m n
notify= ${silent}
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= ${silent} -l h_vmem=120G,mem_free=25G,slots_free=15,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=35G,mem_free=20G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
