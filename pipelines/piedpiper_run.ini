; template for PiedPiper run configuration files

[Run]
load_path= /home/pebert/work/code/mpggit/refdata
load_name= pipelines.ppl_make_refdata

[Pipeline]
name= REFDATA
workdir= ${EnvPaths:workdir}

# Generic
hg19toh37nh= egrep "^chr[0-9XY]+\s" {{inputfile}} | sed 's/chr//' > {{outputfile}}
hg19toh37hd= head -n 1 {{inputfile}} > {{outputfile}} && egrep "^chr[0-9XY]+\s" {{inputfile}} | sed 's/chr//' >> {{outputfile}}

# Major task: genomes
# this is currently only for hs37d5
genstdfagz= gunzip -c {{inputfile}} > {path[0]}/{ASSM[0]}.fa.tmp ; gzip -c {path[0]}/{ASSM[0]}.fa.tmp > {{outputfile}} ; rm {path[0]}/{ASSM[0]}.fa.tmp
to2bit= faToTwoBit {{inputfile}} {{outputfile}}
tofagz= twoBitToFa {inputfile} stdout | gzip > {outputfile}
tofabgz= twoBitToFa {{inputfile}} {path[0]}/{ASSM[0]}.fa.tmp ;
 bgzip -c {path[0]}/{ASSM[0]}.fa.tmp > {{outputfile}} && samtools faidx {{outputfile}} ;
 rm {path[0]}/{ASSM[0]}.fa.tmp
tofasta= twoBitToFa {inputfile} {outputfile} && samtools faidx {outputfile}

# Major task: chromosome sizes
chromwg= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}}
chromauto= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}} --select "(chr)?[0-9][0-9A-Z]?(\s|$$)"
chromaugo= process_genomes.py --task sizes --assembly {ASSM[0]} --2bit {{inputfile}} -tsv {{outputfile1}} -bed {{outputfile2}} --select "(chr)?[0-9XY][0-9A-Z]?(\s|$$)"

# Major task: gene models
gtftobed= convert_genemodel.py --input {inputfile} --output {outputfile} --off-by-one
enstobed= convert_genemodel.py --input {{inputfile}} --output {{outputfile}} --ucsc-ensembl
 --ensembl-source {path[0]}/ensemblSource_UCSC_{ASSM[0]}.txt.gz
 --ensembl-name {path[0]}/ensemblToGeneName_UCSC_{ASSM[0]}.txt.gz
subpchg19= filter_genemodel.py --gene-size 500 --subset protein_coding --input-type gencode --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/hsa_hg19_gencode_{GENCVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/hsa_hg19_gencode_{GENCVER[0]}.map.tsv --gencode-basic
subpcmm9= filter_genemodel.py --gene-size 500 --subset protein_coding --input-type gencode --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/mmu_mm9_gencode_{GENCVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/mmu_mm9_gencode_{GENCVER[0]}.map.tsv --gencode-basic
subpcbta= filter_genemodel.py --gene-size 500 --subset protein_coding --input-type ensbta --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/bta_bosTau7_ensembl_v{ENSVER[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/bta_bosTau7_ensembl_v{ENSVER[0]}.map.tsv
subpcens= filter_genemodel.py --gene-size 500 --subset protein_coding --input-type ensucsc --input {{inputfile}}
 --gene-out {{outputfile}} --trans-out {subpath[0][1]}/subsets/protein_coding/{ANNOTID[0]}.transcripts.bed.gz
 --map-out {subpath[0][1]}/subsets/protein_coding/{ANNOTID[0]}.map.tsv
subpchdf= creepiest.py -nod convert --task region --use-header
 --input {{inputfile}} --output {{outputfile}} --output-group {ASSM[0]}/{ANNOT[0]}/{VER[0]}/{REGTYPE[0]}

# Major task: transcript models and indices
tmfasta= make_transcriptome.py --input {{inputfile}} --output {{outputfile}} --seq-file {subpath[0][3]}/genomes/wg_2bit/{ASSM[0]}.2bit
hsaidx31= salmon index --kmerLen 31 --transcripts <(gunzip -c {{inputfile}}) --threads 16
 --index {subpath[0][1]}/qindex/{TRANSCRIPTOME[0]}.k31.idx --type quasi --perfectHash
mmuidx13= salmon index --kmerLen 13 --transcripts <(gunzip -c {{inputfile}}) --threads 16
 --index {subpath[0][1]}/qindex/{TRANSCRIPTOME[0]}.k13.idx --type quasi --perfectHash
genidx19= salmon index --kmerLen 19 --transcripts <(gunzip -c {{inputfile}}) --threads 16
 --index {subpath[0][1]}/qindex/{TRANSCRIPTOME[0]}.k19.idx --type quasi --perfectHash

# Major task: orthologs
orthconv= process_orthologs.py --input {{inputfile}} --output {{outputfile}} --subset-name proteincoding
 --model1 {genemodel1} --model2 {genemodel2} --subset1 {subset1} --subset2 {subset2}


# Major task: enhancer
catgzbed= gunzip -c {{inputfiles}} | cut -f 1,2,3,4 | sort -V -k 1,2 > {{outputfile}}
mrgbed= bedtools merge -d 5 -c 4 -o distinct -delim @ -i {inputfile} > {outputfile}

# Major task: UCSC chain files
refchrom= ${workdir}/chromsizes/chrom_auto
chfilt= chainFilter -t={targetchroms} -q={querychroms}
 -tMinSize=150 -qMinSize=150
 -minScore=1000 -zeroGap -minGapless=25
 {{inputfile}} | gzip > {{outputfile}}
# take filtered chain file, swap, make query best chain (target in the swapped file)
chfswap= chainStitchId {{inputfile}} stdout | chainSwap stdin stdout | chainSort stdin stdout | gzip -c > {{outputfile}}
# take target best chain, make target best net (that was the query assembly in the original input file)
qrybnet= chainPreNet {{inputfile}} ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}
# take target best net AND target best chain, make reciprocal best chain (for the query assembly in the original input file)
qrybchain= netChainSubset {{inputfile}} ${workdir}/chainfiles/tmp_swap/{TARGET[0]}_to_{QUERY[0]}.tbest.chain.gz stdout |
           chainStitchId stdin stdout | gzip -c > {{outputfile}}
# take reciprocal best chain and swap again to get reciprocal best chains for (original) target
trgbchain= chainSwap {{inputfile}} stdout | chainSort stdin stdout | gzip -c > {{outputfile}}
trgbnet= chainPreNet {{inputfile}} ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refchrom}/{TARGET[0]}_chrom_auto.tsv ${refchrom}/{QUERY[0]}_chrom_auto.tsv stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}
bednet= netToBed -maxGap=100 -minFill=25 {inputfile} stdout | gzip > {outputfile}
qrysymm= chain_symfilt.py --task symmfilt --min-score 2000 --min-size 25 --chain-file {{inputfile}} --chrom {chrom} --output-file {{outputfile}}
mrgblocks= gunzip -c {{inputfiles}} | sort -V -k 5 | gzip > {{outputfile}}
normblocks= chain_symfilt.py --task normmap --map-file {inputfile} --output-file {outputfile}
mapidx= creepiest.py -nod convert --task map -tassm {TARGET[0]} -qassm {QUERY[0]}
 --input {{inputfile}} --output {{outputfile}} --index-col 4
 -tchr ${refchrom}/{TARGET[0]}_chrom_auto.tsv -qchr ${refchrom}/{QUERY[0]}_chrom_auto.tsv

# Major task: conservation tracks
elembed= gunzip -c {inputfile} | cut -f 2,3,4,5,6 |
 egrep "chr[0-9XY][0-9AB]?\s" | sort -V -k 1,2 | gzip > {outputfile}


# Special section for projects
# Sarvesh: protein coding genes > 2kb
srv_pcgenes= convert_genemodel.py --input {inputfile} --output {outputfile} --filter-size 2000 --filter-type "feature:gene,gene_type:protein_coding"
srv_cgiprom= bedtools intersect -header -u -a {inputfile} -b ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_wg.bed |
 cut -f 1,2,3,4,5,6,8,10,26 > {outputfile}
srv_noncgi= bedtools intersect -header -v -a {inputfile} -b ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_wg.bed |
 cut -f 1,2,3,4,5,6,8,10,26 > {outputfile}
srv_annreg= annotate_regions.py -f gc vavouri -i {inputfile} -o {outputfile} -w 2 -g ${workdir}/genomes/wg_2bit/hg19.2bit --dump-fasta
# new set, all protein coding genes
srv_allgenes= convert_genemodel.py --input {inputfile} --output {outputfile} --filter-type "feature:gene,gene_type:protein_coding"
srv_extgenes= bedtools slop -i {inputfile} -g ${EnvPaths:workdir}/chromsizes/chrom_wg/hg19_chrom_wg.tsv -b 1000 | cut -f 1,2,3,4,5,6,8,10,26 | gzip -c > {outputfile}
srv_cgidist= bedtools intersect -header -v -a ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_auto.bed -b {{inputfile}} > {{outputfile}}
srv_cgiprox= bedtools intersect -header -u -a ${EnvPaths:workdir}/cpgislands/bed_format/hg19_cgi_ucsc_auto.bed -b {{inputfile}} > {{outputfile}}
srv_anncgi= annotate_regions.py -f -i {inputfile} -o {outputfile} -w 2 -g ${workdir}/genomes/wg_2bit/hg19.2bit --dump-fasta
# End of project: Sarvesh

[Ruffus]
use_threads= True
jobs= 25
verbose= 2
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=5G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=15G,slots_free=16,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=10G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
